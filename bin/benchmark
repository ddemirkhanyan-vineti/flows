#!/usr/bin/env ruby
# rubocop:disable all

require 'bundler/setup'
require 'benchmark/ips'

require_relative './examples'

with_all = ENV['WITH_ALL']

with_railway = ENV['WITH_RW'] || with_all
with_operation = ENV['WITH_OP'] || with_all
with_dry = ENV['WITH_DRY'] || with_all
with_trailblazer = ENV['WITH_TB'] || with_all

with_poro = ENV['WITH_PORO']

no_prebuild = ENV['NO_PREBUILD']
no_eachbuild = ENV['NO_EACHBUILD']


puts '-' * 50
puts '- task: A + B, one step implementation'
puts '-' * 50

dry_summator = DrySummator.new

Benchmark.ips do |b|
  b.report 'Flows::Railway (build once)' do
    FlowsRailwaySummator.call(a: 1, b: 2)
  end if with_railway && !no_prebuild

  b.report 'Flows::Railway (build each time)' do
    FlowsRailwaySummator.new.call(a: 1, b: 2)
  end if with_railway && !no_eachbuild

  # b.report 'Flows::Operation (build once)' do
  #   FlowsSummator.call(a: 1, b: 2)
  # end if with_operation && !no_prebuild

  # b.report 'Flows::Operation (build each time)' do
  #   FlowsSummator.new.call(a: 1, b: 2)
  # end if with_operation && !no_eachbuild

  b.report 'Dry::Transaction (build once)' do
    dry_summator.call(a: 1, b: 2)
  end if with_dry && !no_prebuild

  b.report 'Dry::Transaction (build each time)' do
    DrySummator.new.call(a: 1, b: 2)
  end if with_dry && !no_eachbuild

  b.report 'Trailblazer::Operation' do
    TBSummator.call(a: 1, b: 2)
  end if with_trailblazer

  b.report 'PORO' do
    POROSummator.call(a: 1, b: 2)
  end if with_poro

  b.compare!
end
puts


puts '-' * 50
puts '- task: ten steps returns successful result'
puts '-' * 50

dry_ten_steps = DryTenSteps.new

Benchmark.ips do |b|
  b.report 'Flows::Railway (build once)' do
    FlowsRailwayTenSteps.call(a: 1, b: 2)
  end if with_railway && !no_prebuild

  b.report 'Flows::Railway (build each time)' do
    FlowsRailwayTenSteps.new.call(a: 1, b: 2)
  end if with_railway && !no_eachbuild

  # b.report 'Flows::Operation (build once)' do
  #   FlowsTenSteps.call(a: 1, b: 2)
  # end if with_operation && !no_prebuild

  # b.report 'Flows::Operation (build each time)' do
  #   FlowsTenSteps.new.call(a: 1, b: 2)
  # end if with_operation && !no_eachbuild

  b.report 'Dry::Transaction (build once)' do
    dry_ten_steps.call(a: 1, b: 2)
  end if with_dry && !no_prebuild

  b.report 'Dry::Transaction (build each time)' do
    DryTenSteps.new.call(a: 1, b: 2)
  end if with_dry && !no_eachbuild

  b.report 'Trailblazer::Operation' do
    TBTenSteps.call(a: 1, b: 2)
  end if with_trailblazer

  b.report 'PORO' do
    POROTenSteps.call
  end if with_poro

  b.compare!
end
puts
